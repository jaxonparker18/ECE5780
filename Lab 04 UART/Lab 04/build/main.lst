ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.USART_Receive_Init,"ax",%progbits
  19              		.align	1
  20              		.global	USART_Receive_Init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	USART_Receive_Init:
  26              	.LFB45:
   1:Src/main.c    **** /**
   2:Src/main.c    ****   *
   3:Src/main.c    ****   * Jaxon Parker
   4:Src/main.c    ****   * U1289670
   5:Src/main.c    ****   *
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * File Name          : main.c
   8:Src/main.c    ****   * Description        : Main program body
   9:Src/main.c    ****   ******************************************************************************
  10:Src/main.c    ****   ** This notice applies to any and all portions of this file
  11:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
  12:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  13:Src/main.c    ****   * inserted by the user or by software development tools
  14:Src/main.c    ****   * are owned by their respective copyright owners.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  19:Src/main.c    ****   * are permitted provided that the following conditions are met:
  20:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  21:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  22:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  24:Src/main.c    ****   *      and/or other materials provided with the distribution.
  25:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  27:Src/main.c    ****   *      without specific prior written permission.
  28:Src/main.c    ****   *
  29:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  32:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 2


  33:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:Src/main.c    ****   *
  40:Src/main.c    ****   ******************************************************************************
  41:Src/main.c    ****   */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  44:Src/main.c    **** #include "main.h"
  45:Src/main.c    **** #include "stm32f0xx_hal.h"
  46:Src/main.c    **** void _Error_Handler(char * file, int line);
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END Includes */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN PV */
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PFP */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** // Function prototypes
  72:Src/main.c    **** char USART_ReceiveChar(void);
  73:Src/main.c    **** void USART_TransmitString(const char* str);
  74:Src/main.c    **** void USART_TransmitChar(char c);
  75:Src/main.c    **** 
  76:Src/main.c    **** // Global variables for received data and flag
  77:Src/main.c    **** volatile char receivedData;
  78:Src/main.c    **** volatile uint8_t newDataFlag = 0;
  79:Src/main.c    **** 
  80:Src/main.c    **** int main(void) {
  81:Src/main.c    ****   HAL_Init();               // Reset of all peripherals, init the Flash and Systick
  82:Src/main.c    ****   SystemClock_Config();     // Configure the system clock
  83:Src/main.c    **** 
  84:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable the GPIOC clock in the RCC
  85:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable GPIOB clock for USART3 pins
  86:Src/main.c    **** 
  87:Src/main.c    ****   // Configure the LED pins to slow-speed, push-pull output mode without pull-up/down resistors
  88:Src/main.c    ****   // Blue LED (PC7)
  89:Src/main.c    ****   GPIOC->MODER |= (1 << 14);
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 3


  90:Src/main.c    ****   GPIOC->MODER &= ~(1 << 15);
  91:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
  92:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 14);
  93:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 15);
  94:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 14);
  95:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 15);
  96:Src/main.c    **** 
  97:Src/main.c    ****   // Red LED (PC6)
  98:Src/main.c    ****   GPIOC->MODER |= (1 << 12);
  99:Src/main.c    ****   GPIOC->MODER &= ~(1 << 13);
 100:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 6);
 101:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 12);
 102:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 13);
 103:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 12); 
 104:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 13); 
 105:Src/main.c    **** 
 106:Src/main.c    ****   // Green LED (PC9)
 107:Src/main.c    ****   GPIOC->MODER |= (1 << 18);
 108:Src/main.c    ****   GPIOC->MODER &= ~(1 << 19);
 109:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 110:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 18);
 111:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 19);
 112:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 18); 
 113:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 19);
 114:Src/main.c    **** 
 115:Src/main.c    ****   // Orange LED (PC8) 
 116:Src/main.c    ****   GPIOC->MODER |= (1 << 16);
 117:Src/main.c    ****   GPIOC->MODER &= ~(1 << 17);
 118:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 119:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 16);
 120:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 17);
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 16); 
 122:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 17);
 123:Src/main.c    **** 
 124:Src/main.c    ****   // User Button
 125:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 
 126:Src/main.c    **** 
 127:Src/main.c    ****   GPIOA->MODER &= ~(3 << 0);      // Set as input
 128:Src/main.c    ****   GPIOA->OSPEEDR &= ~(3 << 0);    // Set as low speed
 129:Src/main.c    ****   GPIOA->PUPDR |= (1 << 0);       // Enable pull-down resistor
 130:Src/main.c    **** 
 131:Src/main.c    ****   // USART3 configuration for PB10 (TX) and PB11 (RX)
 132:Src/main.c    ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN; // Enable USART3 clock
 133:Src/main.c    **** 
 134:Src/main.c    ****   // Set the Baud rate to 115200 bits/second
 135:Src/main.c    ****   uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 136:Src/main.c    ****   uint32_t baud_rate = 115200;
 137:Src/main.c    ****   USART3->BRR = hclk_freq / baud_rate;
 138:Src/main.c    **** 
 139:Src/main.c    ****   // Enable transmitter and receiver hardware
 140:Src/main.c    ****   USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 141:Src/main.c    **** 
 142:Src/main.c    ****   // Enable USART peripheral
 143:Src/main.c    ****   USART3->CR1 |= USART_CR1_UE;
 144:Src/main.c    **** 
 145:Src/main.c    ****   // Set PB10 and PB11 to alternate function mode
 146:Src/main.c    ****   GPIOB->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER11);
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 4


 147:Src/main.c    ****   GPIOB->MODER |= (GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1);
 148:Src/main.c    **** 
 149:Src/main.c    ****   // Program the correct alternate function number into the GPIO AFR registers
 150:Src/main.c    ****   GPIOB->AFR[1] |= (0x04 << GPIO_AFRH_AFSEL10_Pos) | (0x04 << GPIO_AFRH_AFSEL11_Pos);
 151:Src/main.c    **** 
 152:Src/main.c    ****   // Initialize one pin logic high and the other to low
 153:Src/main.c    ****   GPIOC->ODR |= (1 << 7);   // Red High
 154:Src/main.c    ****   GPIOC->ODR &= ~(1 << 6);  // Blue Low
 155:Src/main.c    ****   GPIOC->ODR &= ~(1 << 9);   // Green Low
 156:Src/main.c    ****   GPIOC->ODR &= ~(1 << 8);  // Orange Low
 157:Src/main.c    **** 
 158:Src/main.c    ****   // ----------------------------------------------------------------------------------------------
 159:Src/main.c    ****   // 4.3 Interrupt-Based Reception                            My Personal Terminal Prompt: screen /
 160:Src/main.c    ****   // ----------------------------------------------------------------------------------------------
 161:Src/main.c    **** 
 162:Src/main.c    ****   USART_Receive_Init();     // Initialize USART receive with interrupt
 163:Src/main.c    **** 
 164:Src/main.c    ****   while (1) {
 165:Src/main.c    ****     // Print command prompt
 166:Src/main.c    ****     USART_TransmitString("CMD? ");
 167:Src/main.c    **** 
 168:Src/main.c    ****     // Wait for new data flag
 169:Src/main.c    ****     while (!newDataFlag);
 170:Src/main.c    **** 
 171:Src/main.c    ****     // Process the received command
 172:Src/main.c    ****     processCommand(receivedData);
 173:Src/main.c    **** 
 174:Src/main.c    ****     // Reset the flag
 175:Src/main.c    ****     newDataFlag = 0;
 176:Src/main.c    ****   }
 177:Src/main.c    **** 
 178:Src/main.c    ****   // ----------------------------------------------------------------------------------------------
 179:Src/main.c    ****   // 4.2 Blocking Reception                                   My Personal Terminal Prompt: screen /
 180:Src/main.c    ****   // ----------------------------------------------------------------------------------------------
 181:Src/main.c    **** 
 182:Src/main.c    ****   // char receivedChar;
 183:Src/main.c    **** 
 184:Src/main.c    ****   // while (1) {
 185:Src/main.c    ****   //   // Wait for a character to be received
 186:Src/main.c    ****   //   receivedChar = USART_ReceiveChar();
 187:Src/main.c    **** 
 188:Src/main.c    ****   //   // Toggle the appropriate LED based on the received character
 189:Src/main.c    ****   //   switch (receivedChar) {
 190:Src/main.c    ****   //     case 'r':
 191:Src/main.c    ****   //       // Toggle red LED
 192:Src/main.c    ****   //       GPIOC->ODR ^= (1 << 6);
 193:Src/main.c    ****   //       break;
 194:Src/main.c    ****   //     case 'g':
 195:Src/main.c    ****   //       // Toggle green LED
 196:Src/main.c    ****   //       GPIOC->ODR ^= (1 << 9);
 197:Src/main.c    ****   //       break;
 198:Src/main.c    ****   //     case 'b':
 199:Src/main.c    ****   //       // Toggle blue LED
 200:Src/main.c    ****   //       GPIOC->ODR ^= (1 << 7);
 201:Src/main.c    ****   //       break;
 202:Src/main.c    ****   //     case 'o':
 203:Src/main.c    ****   //       // Toggle orange LED
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 5


 204:Src/main.c    ****   //       GPIOC->ODR ^= (1 << 8);
 205:Src/main.c    ****   //       break;
 206:Src/main.c    ****   //     default:
 207:Src/main.c    ****   //       // Print an error message for unrecognized characters
 208:Src/main.c    ****   //       USART_TransmitString("Error: Unrecognized command!\r\n");
 209:Src/main.c    ****   //   }
 210:Src/main.c    ****   // }
 211:Src/main.c    **** 
 212:Src/main.c    ****   // ----------------------------------------------------------------------------------------------
 213:Src/main.c    ****   // This was for testing before the blocking portion         My Personal Terminal Prompt: screen /
 214:Src/main.c    ****   // ----------------------------------------------------------------------------------------------
 215:Src/main.c    **** 
 216:Src/main.c    ****   // // Flag to ensure the string is transmitted only once
 217:Src/main.c    ****   // uint8_t transmittedFlag = 0;
 218:Src/main.c    **** 
 219:Src/main.c    ****   // while (1) {
 220:Src/main.c    ****   //   // Toggle red LED (PC6) with a delay of 400-600ms
 221:Src/main.c    ****   //   GPIOC->ODR ^= (1 << 6);
 222:Src/main.c    ****   //   HAL_Delay(500);
 223:Src/main.c    **** 
 224:Src/main.c    ****   //   // // Transmit a character (for example, 'A') using the USART
 225:Src/main.c    ****   //   // USART_TransmitChar('A');
 226:Src/main.c    **** 
 227:Src/main.c    ****   //   // Transmit the string using the USART only if not transmitted yet
 228:Src/main.c    ****   //   if (!transmittedFlag) {
 229:Src/main.c    ****   //     USART_TransmitString("Hello, USART!");
 230:Src/main.c    ****   //     transmittedFlag = 1; // Set the flag to indicate that the string has been transmitted
 231:Src/main.c    ****   //   }
 232:Src/main.c    ****   // }
 233:Src/main.c    **** 
 234:Src/main.c    **** }
 235:Src/main.c    **** 
 236:Src/main.c    **** // Function to process the received command
 237:Src/main.c    **** void processCommand(char command) {
 238:Src/main.c    ****   char color;
 239:Src/main.c    ****   char action;
 240:Src/main.c    **** 
 241:Src/main.c    ****   // Extract color and action from the command
 242:Src/main.c    ****   color = command;
 243:Src/main.c    ****   action = USART_ReceiveChar();
 244:Src/main.c    **** 
 245:Src/main.c    ****   // Process the command
 246:Src/main.c    ****   switch (action) {
 247:Src/main.c    ****     case '0':
 248:Src/main.c    ****       // Turn off the LED
 249:Src/main.c    ****       turnOffLED(color);
 250:Src/main.c    ****       break;
 251:Src/main.c    ****     case '1':
 252:Src/main.c    ****       // Turn on the LED
 253:Src/main.c    ****       turnOnLED(color);
 254:Src/main.c    ****       break;
 255:Src/main.c    ****     case '2':
 256:Src/main.c    ****       // Toggle the LED
 257:Src/main.c    ****       toggleLED(color);
 258:Src/main.c    ****       break;
 259:Src/main.c    ****     default:
 260:Src/main.c    ****       // Print an error message for unrecognized commands
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 6


 261:Src/main.c    ****       USART_TransmitString("Error: Unrecognized command!\r\n");
 262:Src/main.c    ****       break;
 263:Src/main.c    ****   }
 264:Src/main.c    **** }
 265:Src/main.c    **** 
 266:Src/main.c    **** // Function to turn off the LED based on color
 267:Src/main.c    **** void turnOffLED(char color) {
 268:Src/main.c    ****   // Turn the appropriate LED based off the received character
 269:Src/main.c    ****   switch (color) {
 270:Src/main.c    ****     case 'r':
 271:Src/main.c    ****       // Toggle red LED
 272:Src/main.c    ****       GPIOC->ODR &= ~(1 << 6);
 273:Src/main.c    ****       break;
 274:Src/main.c    ****     case 'g':
 275:Src/main.c    ****       // Toggle green LED
 276:Src/main.c    ****       GPIOC->ODR &= ~(1 << 9);
 277:Src/main.c    ****       break;
 278:Src/main.c    ****     case 'b':
 279:Src/main.c    ****       // Toggle blue LED
 280:Src/main.c    ****       GPIOC->ODR &= ~(1 << 7);
 281:Src/main.c    ****       break;
 282:Src/main.c    ****     case 'o':
 283:Src/main.c    ****       // Toggle orange LED
 284:Src/main.c    ****       GPIOC->ODR &= ~(1 << 8);
 285:Src/main.c    ****       break;
 286:Src/main.c    ****     default:
 287:Src/main.c    ****       // Print an error message for unrecognized characters
 288:Src/main.c    ****       USART_TransmitString("Error: Unrecognized command!\r\n");
 289:Src/main.c    ****   }
 290:Src/main.c    **** 
 291:Src/main.c    ****   // Print a message indicating the LED is turned off
 292:Src/main.c    ****   USART_TransmitString("LED turned off\r\n");
 293:Src/main.c    **** }
 294:Src/main.c    **** 
 295:Src/main.c    **** // Function to turn on the LED based on color
 296:Src/main.c    **** void turnOnLED(char color) {
 297:Src/main.c    ****   // Turn the appropriate LED based on the received character
 298:Src/main.c    ****   switch (color) {
 299:Src/main.c    ****     case 'r':
 300:Src/main.c    ****       // Toggle red LED
 301:Src/main.c    ****       GPIOC->ODR |= (1 << 6);
 302:Src/main.c    ****       break;
 303:Src/main.c    ****     case 'g':
 304:Src/main.c    ****       // Toggle green LED
 305:Src/main.c    ****       GPIOC->ODR |= (1 << 9);
 306:Src/main.c    ****       break;
 307:Src/main.c    ****     case 'b':
 308:Src/main.c    ****       // Toggle blue LED
 309:Src/main.c    ****       GPIOC->ODR |= (1 << 7);
 310:Src/main.c    ****       break;
 311:Src/main.c    ****     case 'o':
 312:Src/main.c    ****       // Toggle orange LED
 313:Src/main.c    ****       GPIOC->ODR |= (1 << 8);
 314:Src/main.c    ****       break;
 315:Src/main.c    ****     default:
 316:Src/main.c    ****       // Print an error message for unrecognized characters
 317:Src/main.c    ****       USART_TransmitString("Error: Unrecognized command!\r\n");
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 7


 318:Src/main.c    ****   }
 319:Src/main.c    **** 
 320:Src/main.c    ****   // Print a message indicating the LED is turned on
 321:Src/main.c    ****   USART_TransmitString("LED turned on\r\n");
 322:Src/main.c    **** }
 323:Src/main.c    **** 
 324:Src/main.c    **** // Function to toggle the LED based on color
 325:Src/main.c    **** void toggleLED(char color) {
 326:Src/main.c    ****   // Toggle the appropriate LED based on the received character
 327:Src/main.c    ****   switch (color) {
 328:Src/main.c    ****     case 'r':
 329:Src/main.c    ****       // Toggle red LED
 330:Src/main.c    ****       GPIOC->ODR ^= (1 << 6);
 331:Src/main.c    ****       break;
 332:Src/main.c    ****     case 'g':
 333:Src/main.c    ****       // Toggle green LED
 334:Src/main.c    ****       GPIOC->ODR ^= (1 << 9);
 335:Src/main.c    ****       break;
 336:Src/main.c    ****     case 'b':
 337:Src/main.c    ****       // Toggle blue LED
 338:Src/main.c    ****       GPIOC->ODR ^= (1 << 7);
 339:Src/main.c    ****       break;
 340:Src/main.c    ****     case 'o':
 341:Src/main.c    ****       // Toggle orange LED
 342:Src/main.c    ****       GPIOC->ODR ^= (1 << 8);
 343:Src/main.c    ****       break;
 344:Src/main.c    ****     default:
 345:Src/main.c    ****       // Print an error message for unrecognized characters
 346:Src/main.c    ****       USART_TransmitString("Error: Unrecognized command!\r\n");
 347:Src/main.c    ****       return;  // Exit the function if an unrecognized command is received
 348:Src/main.c    ****   }
 349:Src/main.c    **** 
 350:Src/main.c    ****   // Print a message indicating the LED is toggled
 351:Src/main.c    ****   USART_TransmitString("LED toggled\r\n");
 352:Src/main.c    **** }
 353:Src/main.c    **** 
 354:Src/main.c    **** // Function to initialize USART receive with interrupt
 355:Src/main.c    **** void USART_Receive_Init(void) {
  27              		.loc 1 355 31 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 356:Src/main.c    ****   // Enable the USART receive register not empty interrupt
 357:Src/main.c    ****   USART3->CR1 |= USART_CR1_RXNEIE;
  32              		.loc 1 357 3 view .LVU1
  33              		.loc 1 357 9 is_stmt 0 view .LVU2
  34 0000 074A     		ldr	r2, .L2
  35 0002 1368     		ldr	r3, [r2]
  36              		.loc 1 357 15 view .LVU3
  37 0004 2021     		movs	r1, #32
  38 0006 0B43     		orrs	r3, r1
  39 0008 1360     		str	r3, [r2]
 358:Src/main.c    **** 
 359:Src/main.c    ****   // Enable and set the USART interrupt priority in the NVIC
 360:Src/main.c    ****   NVIC_EnableIRQ(USART3_4_IRQn);
  40              		.loc 1 360 3 is_stmt 1 view .LVU4
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 8


  41              	.LVL0:
  42              	.LBB6:
  43              	.LBI6:
  44              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 9


  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 10


 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 11


 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 12


 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 13


 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 14


 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 15


 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 16


 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 17


 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 18


 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 19


  45              		.loc 2 623 22 view .LVU5
  46              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  47              		.loc 2 625 3 view .LVU6
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  48              		.loc 2 627 5 view .LVU7
  49              		.loc 2 627 20 is_stmt 0 view .LVU8
  50 000a 064B     		ldr	r3, .L2+4
  51 000c 8022     		movs	r2, #128
  52 000e 9205     		lsls	r2, r2, #22
  53 0010 1A60     		str	r2, [r3]
  54              	.LVL1:
  55              		.loc 2 627 20 view .LVU9
  56              	.LBE7:
  57              	.LBE6:
 361:Src/main.c    ****   NVIC_SetPriority(USART3_4_IRQn, 0);
  58              		.loc 1 361 3 is_stmt 1 view .LVU10
  59              	.LBB8:
  60              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 20


 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 21


 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
  61              		.loc 2 730 22 view .LVU11
  62              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  63              		.loc 2 732 3 view .LVU12
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  64              		.loc 2 734 5 view .LVU13
  65              		.loc 2 734 52 is_stmt 0 view .LVU14
  66 0012 C721     		movs	r1, #199
  67 0014 8900     		lsls	r1, r1, #2
  68 0016 5A58     		ldr	r2, [r3, r1]
  69              		.loc 2 734 33 view .LVU15
  70 0018 0348     		ldr	r0, .L2+8
  71 001a 0240     		ands	r2, r0
  72              		.loc 2 734 30 view .LVU16
  73 001c 5A50     		str	r2, [r3, r1]
  74              	.LVL2:
  75              		.loc 2 734 30 view .LVU17
  76              	.LBE9:
  77              	.LBE8:
 362:Src/main.c    **** }
  78              		.loc 1 362 1 view .LVU18
  79              		@ sp needed
  80 001e 7047     		bx	lr
  81              	.L3:
  82              		.align	2
  83              	.L2:
  84 0020 00480040 		.word	1073760256
  85 0024 00E100E0 		.word	-536813312
  86 0028 FF00FFFF 		.word	-65281
  87              		.cfi_endproc
  88              	.LFE45:
  90              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
  91              		.align	1
  92              		.global	USART3_4_IRQHandler
  93              		.syntax unified
  94              		.code	16
  95              		.thumb_func
  97              	USART3_4_IRQHandler:
  98              	.LFB46:
 363:Src/main.c    **** 
 364:Src/main.c    **** // USART interrupt handler (blank)
 365:Src/main.c    **** void USART3_4_IRQHandler(void) {
  99              		.loc 1 365 32 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 22


 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 366:Src/main.c    ****   // Save the receive register's value into the global variable
 367:Src/main.c    ****   receivedData = (char)(USART3->RDR & 0xFF);
 104              		.loc 1 367 3 view .LVU20
 105              		.loc 1 367 31 is_stmt 0 view .LVU21
 106 0000 044B     		ldr	r3, .L5
 107 0002 9B8C     		ldrh	r3, [r3, #36]
 108              		.loc 1 367 18 view .LVU22
 109 0004 DBB2     		uxtb	r3, r3
 110              		.loc 1 367 16 view .LVU23
 111 0006 044A     		ldr	r2, .L5+4
 112 0008 1370     		strb	r3, [r2]
 368:Src/main.c    **** 
 369:Src/main.c    ****   // Set a global variable as a flag indicating new data
 370:Src/main.c    ****   newDataFlag = 1;
 113              		.loc 1 370 3 is_stmt 1 view .LVU24
 114              		.loc 1 370 15 is_stmt 0 view .LVU25
 115 000a 044B     		ldr	r3, .L5+8
 116 000c 0122     		movs	r2, #1
 117 000e 1A70     		strb	r2, [r3]
 371:Src/main.c    **** }
 118              		.loc 1 371 1 view .LVU26
 119              		@ sp needed
 120 0010 7047     		bx	lr
 121              	.L6:
 122 0012 C046     		.align	2
 123              	.L5:
 124 0014 00480040 		.word	1073760256
 125 0018 00000000 		.word	receivedData
 126 001c 00000000 		.word	newDataFlag
 127              		.cfi_endproc
 128              	.LFE46:
 130              		.section	.text.USART_TransmitChar,"ax",%progbits
 131              		.align	1
 132              		.global	USART_TransmitChar
 133              		.syntax unified
 134              		.code	16
 135              		.thumb_func
 137              	USART_TransmitChar:
 138              	.LFB48:
 372:Src/main.c    **** 
 373:Src/main.c    **** // Function to transmit a string on USART3
 374:Src/main.c    **** void USART_TransmitString(const char* str) {
 375:Src/main.c    ****   // Loop over each character in the array
 376:Src/main.c    ****   while (*str != '\0') {
 377:Src/main.c    ****     // Transmit the current character
 378:Src/main.c    ****     USART_TransmitChar(*str);
 379:Src/main.c    ****     
 380:Src/main.c    ****     // Move to the next character in the array
 381:Src/main.c    ****     str++;
 382:Src/main.c    ****   }
 383:Src/main.c    **** }
 384:Src/main.c    **** 
 385:Src/main.c    **** // Function to transmit a single character on USART3
 386:Src/main.c    **** void USART_TransmitChar(char c) {
 139              		.loc 1 386 33 is_stmt 1 view -0
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 23


 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL3:
 145              	.L8:
 387:Src/main.c    ****   // Wait for the USART transmit data register to be empty
 388:Src/main.c    ****   while (!(USART3->ISR & USART_ISR_TXE));
 146              		.loc 1 388 10 discriminator 1 view .LVU28
 147              		.loc 1 388 18 is_stmt 0 discriminator 1 view .LVU29
 148 0000 034B     		ldr	r3, .L10
 149 0002 DB69     		ldr	r3, [r3, #28]
 150              		.loc 1 388 10 discriminator 1 view .LVU30
 151 0004 1B06     		lsls	r3, r3, #24
 152 0006 FBD5     		bpl	.L8
 389:Src/main.c    **** 
 390:Src/main.c    ****   // Write the character into the transmit data register
 391:Src/main.c    ****   USART3->TDR = (uint16_t)c;
 153              		.loc 1 391 3 is_stmt 1 view .LVU31
 154              		.loc 1 391 15 is_stmt 0 view .LVU32
 155 0008 014B     		ldr	r3, .L10
 156 000a 1885     		strh	r0, [r3, #40]
 392:Src/main.c    **** }
 157              		.loc 1 392 1 view .LVU33
 158              		@ sp needed
 159 000c 7047     		bx	lr
 160              	.L11:
 161 000e C046     		.align	2
 162              	.L10:
 163 0010 00480040 		.word	1073760256
 164              		.cfi_endproc
 165              	.LFE48:
 167              		.section	.text.USART_TransmitString,"ax",%progbits
 168              		.align	1
 169              		.global	USART_TransmitString
 170              		.syntax unified
 171              		.code	16
 172              		.thumb_func
 174              	USART_TransmitString:
 175              	.LVL4:
 176              	.LFB47:
 374:Src/main.c    ****   // Loop over each character in the array
 177              		.loc 1 374 44 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 374:Src/main.c    ****   // Loop over each character in the array
 181              		.loc 1 374 44 is_stmt 0 view .LVU35
 182 0000 10B5     		push	{r4, lr}
 183              	.LCFI0:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 187 0002 0400     		movs	r4, r0
 376:Src/main.c    ****     // Transmit the current character
 188              		.loc 1 376 3 is_stmt 1 view .LVU36
 376:Src/main.c    ****     // Transmit the current character
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 24


 189              		.loc 1 376 9 is_stmt 0 view .LVU37
 190 0004 02E0     		b	.L13
 191              	.LVL5:
 192              	.L14:
 378:Src/main.c    ****     
 193              		.loc 1 378 5 is_stmt 1 view .LVU38
 194 0006 FFF7FEFF 		bl	USART_TransmitChar
 195              	.LVL6:
 381:Src/main.c    ****   }
 196              		.loc 1 381 5 view .LVU39
 381:Src/main.c    ****   }
 197              		.loc 1 381 8 is_stmt 0 view .LVU40
 198 000a 0134     		adds	r4, r4, #1
 199              	.LVL7:
 200              	.L13:
 376:Src/main.c    ****     // Transmit the current character
 201              		.loc 1 376 15 is_stmt 1 view .LVU41
 376:Src/main.c    ****     // Transmit the current character
 202              		.loc 1 376 10 is_stmt 0 view .LVU42
 203 000c 2078     		ldrb	r0, [r4]
 376:Src/main.c    ****     // Transmit the current character
 204              		.loc 1 376 15 view .LVU43
 205 000e 0028     		cmp	r0, #0
 206 0010 F9D1     		bne	.L14
 383:Src/main.c    **** 
 207              		.loc 1 383 1 view .LVU44
 208              		@ sp needed
 209              	.LVL8:
 383:Src/main.c    **** 
 210              		.loc 1 383 1 view .LVU45
 211 0012 10BD     		pop	{r4, pc}
 212              		.cfi_endproc
 213              	.LFE47:
 215              		.section	.rodata.turnOffLED.str1.4,"aMS",%progbits,1
 216              		.align	2
 217              	.LC2:
 218 0000 4572726F 		.ascii	"Error: Unrecognized command!\015\012\000"
 218      723A2055 
 218      6E726563 
 218      6F676E69 
 218      7A656420 
 219 001f 00       		.align	2
 220              	.LC4:
 221 0020 4C454420 		.ascii	"LED turned off\015\012\000"
 221      7475726E 
 221      6564206F 
 221      66660D0A 
 221      00
 222              		.section	.text.turnOffLED,"ax",%progbits
 223              		.align	1
 224              		.global	turnOffLED
 225              		.syntax unified
 226              		.code	16
 227              		.thumb_func
 229              	turnOffLED:
 230              	.LVL9:
 231              	.LFB42:
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 25


 267:Src/main.c    ****   // Turn the appropriate LED based off the received character
 232              		.loc 1 267 29 is_stmt 1 view -0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 267:Src/main.c    ****   // Turn the appropriate LED based off the received character
 236              		.loc 1 267 29 is_stmt 0 view .LVU47
 237 0000 10B5     		push	{r4, lr}
 238              	.LCFI1:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 4, -8
 241              		.cfi_offset 14, -4
 269:Src/main.c    ****     case 'r':
 242              		.loc 1 269 3 is_stmt 1 view .LVU48
 243 0002 6F28     		cmp	r0, #111
 244 0004 1BD0     		beq	.L16
 245 0006 09D8     		bhi	.L17
 246 0008 6228     		cmp	r0, #98
 247 000a 12D0     		beq	.L18
 248 000c 6728     		cmp	r0, #103
 249 000e 1CD1     		bne	.L20
 276:Src/main.c    ****       break;
 250              		.loc 1 276 7 view .LVU49
 276:Src/main.c    ****       break;
 251              		.loc 1 276 12 is_stmt 0 view .LVU50
 252 0010 104A     		ldr	r2, .L22
 253 0012 5369     		ldr	r3, [r2, #20]
 276:Src/main.c    ****       break;
 254              		.loc 1 276 18 view .LVU51
 255 0014 1049     		ldr	r1, .L22+4
 256 0016 0B40     		ands	r3, r1
 257 0018 5361     		str	r3, [r2, #20]
 277:Src/main.c    ****     case 'b':
 258              		.loc 1 277 7 is_stmt 1 view .LVU52
 259 001a 06E0     		b	.L21
 260              	.L17:
 269:Src/main.c    ****     case 'r':
 261              		.loc 1 269 3 is_stmt 0 view .LVU53
 262 001c 7228     		cmp	r0, #114
 263 001e 14D1     		bne	.L20
 272:Src/main.c    ****       break;
 264              		.loc 1 272 7 is_stmt 1 view .LVU54
 272:Src/main.c    ****       break;
 265              		.loc 1 272 12 is_stmt 0 view .LVU55
 266 0020 0C4A     		ldr	r2, .L22
 267 0022 5369     		ldr	r3, [r2, #20]
 272:Src/main.c    ****       break;
 268              		.loc 1 272 18 view .LVU56
 269 0024 4021     		movs	r1, #64
 270 0026 8B43     		bics	r3, r1
 271 0028 5361     		str	r3, [r2, #20]
 273:Src/main.c    ****     case 'g':
 272              		.loc 1 273 7 is_stmt 1 view .LVU57
 273              	.LVL10:
 274              	.L21:
 292:Src/main.c    **** }
 275              		.loc 1 292 3 view .LVU58
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 26


 276 002a 0C48     		ldr	r0, .L22+8
 277 002c FFF7FEFF 		bl	USART_TransmitString
 278              	.LVL11:
 293:Src/main.c    **** 
 279              		.loc 1 293 1 is_stmt 0 view .LVU59
 280              		@ sp needed
 281 0030 10BD     		pop	{r4, pc}
 282              	.LVL12:
 283              	.L18:
 280:Src/main.c    ****       break;
 284              		.loc 1 280 7 is_stmt 1 view .LVU60
 280:Src/main.c    ****       break;
 285              		.loc 1 280 12 is_stmt 0 view .LVU61
 286 0032 084A     		ldr	r2, .L22
 287 0034 5369     		ldr	r3, [r2, #20]
 280:Src/main.c    ****       break;
 288              		.loc 1 280 18 view .LVU62
 289 0036 8021     		movs	r1, #128
 290 0038 8B43     		bics	r3, r1
 291 003a 5361     		str	r3, [r2, #20]
 281:Src/main.c    ****     case 'o':
 292              		.loc 1 281 7 is_stmt 1 view .LVU63
 293 003c F5E7     		b	.L21
 294              	.L16:
 284:Src/main.c    ****       break;
 295              		.loc 1 284 7 view .LVU64
 284:Src/main.c    ****       break;
 296              		.loc 1 284 12 is_stmt 0 view .LVU65
 297 003e 054A     		ldr	r2, .L22
 298 0040 5369     		ldr	r3, [r2, #20]
 284:Src/main.c    ****       break;
 299              		.loc 1 284 18 view .LVU66
 300 0042 0749     		ldr	r1, .L22+12
 301 0044 0B40     		ands	r3, r1
 302 0046 5361     		str	r3, [r2, #20]
 285:Src/main.c    ****     default:
 303              		.loc 1 285 7 is_stmt 1 view .LVU67
 304 0048 EFE7     		b	.L21
 305              	.L20:
 288:Src/main.c    ****   }
 306              		.loc 1 288 7 view .LVU68
 307 004a 0648     		ldr	r0, .L22+16
 308              	.LVL13:
 288:Src/main.c    ****   }
 309              		.loc 1 288 7 is_stmt 0 view .LVU69
 310 004c FFF7FEFF 		bl	USART_TransmitString
 311              	.LVL14:
 312 0050 EBE7     		b	.L21
 313              	.L23:
 314 0052 C046     		.align	2
 315              	.L22:
 316 0054 00080048 		.word	1207961600
 317 0058 FFFDFFFF 		.word	-513
 318 005c 20000000 		.word	.LC4
 319 0060 FFFEFFFF 		.word	-257
 320 0064 00000000 		.word	.LC2
 321              		.cfi_endproc
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 27


 322              	.LFE42:
 324              		.section	.rodata.turnOnLED.str1.4,"aMS",%progbits,1
 325              		.align	2
 326              	.LC7:
 327 0000 4C454420 		.ascii	"LED turned on\015\012\000"
 327      7475726E 
 327      6564206F 
 327      6E0D0A00 
 328              		.section	.text.turnOnLED,"ax",%progbits
 329              		.align	1
 330              		.global	turnOnLED
 331              		.syntax unified
 332              		.code	16
 333              		.thumb_func
 335              	turnOnLED:
 336              	.LVL15:
 337              	.LFB43:
 296:Src/main.c    ****   // Turn the appropriate LED based on the received character
 338              		.loc 1 296 28 is_stmt 1 view -0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 296:Src/main.c    ****   // Turn the appropriate LED based on the received character
 342              		.loc 1 296 28 is_stmt 0 view .LVU71
 343 0000 10B5     		push	{r4, lr}
 344              	.LCFI2:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 4, -8
 347              		.cfi_offset 14, -4
 298:Src/main.c    ****     case 'r':
 348              		.loc 1 298 3 is_stmt 1 view .LVU72
 349 0002 6F28     		cmp	r0, #111
 350 0004 1CD0     		beq	.L25
 351 0006 0AD8     		bhi	.L26
 352 0008 6228     		cmp	r0, #98
 353 000a 13D0     		beq	.L27
 354 000c 6728     		cmp	r0, #103
 355 000e 1ED1     		bne	.L29
 305:Src/main.c    ****       break;
 356              		.loc 1 305 7 view .LVU73
 305:Src/main.c    ****       break;
 357              		.loc 1 305 12 is_stmt 0 view .LVU74
 358 0010 114A     		ldr	r2, .L31
 359 0012 5169     		ldr	r1, [r2, #20]
 305:Src/main.c    ****       break;
 360              		.loc 1 305 18 view .LVU75
 361 0014 8023     		movs	r3, #128
 362 0016 9B00     		lsls	r3, r3, #2
 363 0018 0B43     		orrs	r3, r1
 364 001a 5361     		str	r3, [r2, #20]
 306:Src/main.c    ****     case 'b':
 365              		.loc 1 306 7 is_stmt 1 view .LVU76
 366 001c 06E0     		b	.L30
 367              	.L26:
 298:Src/main.c    ****     case 'r':
 368              		.loc 1 298 3 is_stmt 0 view .LVU77
 369 001e 7228     		cmp	r0, #114
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 28


 370 0020 15D1     		bne	.L29
 301:Src/main.c    ****       break;
 371              		.loc 1 301 7 is_stmt 1 view .LVU78
 301:Src/main.c    ****       break;
 372              		.loc 1 301 12 is_stmt 0 view .LVU79
 373 0022 0D4A     		ldr	r2, .L31
 374 0024 5369     		ldr	r3, [r2, #20]
 301:Src/main.c    ****       break;
 375              		.loc 1 301 18 view .LVU80
 376 0026 4021     		movs	r1, #64
 377 0028 0B43     		orrs	r3, r1
 378 002a 5361     		str	r3, [r2, #20]
 302:Src/main.c    ****     case 'g':
 379              		.loc 1 302 7 is_stmt 1 view .LVU81
 380              	.LVL16:
 381              	.L30:
 321:Src/main.c    **** }
 382              		.loc 1 321 3 view .LVU82
 383 002c 0B48     		ldr	r0, .L31+4
 384 002e FFF7FEFF 		bl	USART_TransmitString
 385              	.LVL17:
 322:Src/main.c    **** 
 386              		.loc 1 322 1 is_stmt 0 view .LVU83
 387              		@ sp needed
 388 0032 10BD     		pop	{r4, pc}
 389              	.LVL18:
 390              	.L27:
 309:Src/main.c    ****       break;
 391              		.loc 1 309 7 is_stmt 1 view .LVU84
 309:Src/main.c    ****       break;
 392              		.loc 1 309 12 is_stmt 0 view .LVU85
 393 0034 084A     		ldr	r2, .L31
 394 0036 5369     		ldr	r3, [r2, #20]
 309:Src/main.c    ****       break;
 395              		.loc 1 309 18 view .LVU86
 396 0038 8021     		movs	r1, #128
 397 003a 0B43     		orrs	r3, r1
 398 003c 5361     		str	r3, [r2, #20]
 310:Src/main.c    ****     case 'o':
 399              		.loc 1 310 7 is_stmt 1 view .LVU87
 400 003e F5E7     		b	.L30
 401              	.L25:
 313:Src/main.c    ****       break;
 402              		.loc 1 313 7 view .LVU88
 313:Src/main.c    ****       break;
 403              		.loc 1 313 12 is_stmt 0 view .LVU89
 404 0040 054A     		ldr	r2, .L31
 405 0042 5169     		ldr	r1, [r2, #20]
 313:Src/main.c    ****       break;
 406              		.loc 1 313 18 view .LVU90
 407 0044 8023     		movs	r3, #128
 408 0046 5B00     		lsls	r3, r3, #1
 409 0048 0B43     		orrs	r3, r1
 410 004a 5361     		str	r3, [r2, #20]
 314:Src/main.c    ****     default:
 411              		.loc 1 314 7 is_stmt 1 view .LVU91
 412 004c EEE7     		b	.L30
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 29


 413              	.L29:
 317:Src/main.c    ****   }
 414              		.loc 1 317 7 view .LVU92
 415 004e 0448     		ldr	r0, .L31+8
 416              	.LVL19:
 317:Src/main.c    ****   }
 417              		.loc 1 317 7 is_stmt 0 view .LVU93
 418 0050 FFF7FEFF 		bl	USART_TransmitString
 419              	.LVL20:
 420 0054 EAE7     		b	.L30
 421              	.L32:
 422 0056 C046     		.align	2
 423              	.L31:
 424 0058 00080048 		.word	1207961600
 425 005c 00000000 		.word	.LC7
 426 0060 00000000 		.word	.LC2
 427              		.cfi_endproc
 428              	.LFE43:
 430              		.section	.rodata.toggleLED.str1.4,"aMS",%progbits,1
 431              		.align	2
 432              	.LC10:
 433 0000 4C454420 		.ascii	"LED toggled\015\012\000"
 433      746F6767 
 433      6C65640D 
 433      0A00
 434              		.section	.text.toggleLED,"ax",%progbits
 435              		.align	1
 436              		.global	toggleLED
 437              		.syntax unified
 438              		.code	16
 439              		.thumb_func
 441              	toggleLED:
 442              	.LVL21:
 443              	.LFB44:
 325:Src/main.c    ****   // Toggle the appropriate LED based on the received character
 444              		.loc 1 325 28 is_stmt 1 view -0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 325:Src/main.c    ****   // Toggle the appropriate LED based on the received character
 448              		.loc 1 325 28 is_stmt 0 view .LVU95
 449 0000 10B5     		push	{r4, lr}
 450              	.LCFI3:
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 4, -8
 453              		.cfi_offset 14, -4
 327:Src/main.c    ****     case 'r':
 454              		.loc 1 327 3 is_stmt 1 view .LVU96
 455 0002 6F28     		cmp	r0, #111
 456 0004 1CD0     		beq	.L34
 457 0006 0AD8     		bhi	.L35
 458 0008 6228     		cmp	r0, #98
 459 000a 13D0     		beq	.L36
 460 000c 6728     		cmp	r0, #103
 461 000e 1ED1     		bne	.L38
 334:Src/main.c    ****       break;
 462              		.loc 1 334 7 view .LVU97
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 30


 334:Src/main.c    ****       break;
 463              		.loc 1 334 12 is_stmt 0 view .LVU98
 464 0010 114A     		ldr	r2, .L41
 465 0012 5169     		ldr	r1, [r2, #20]
 334:Src/main.c    ****       break;
 466              		.loc 1 334 18 view .LVU99
 467 0014 8023     		movs	r3, #128
 468 0016 9B00     		lsls	r3, r3, #2
 469 0018 4B40     		eors	r3, r1
 470 001a 5361     		str	r3, [r2, #20]
 335:Src/main.c    ****     case 'b':
 471              		.loc 1 335 7 is_stmt 1 view .LVU100
 472 001c 06E0     		b	.L39
 473              	.L35:
 327:Src/main.c    ****     case 'r':
 474              		.loc 1 327 3 is_stmt 0 view .LVU101
 475 001e 7228     		cmp	r0, #114
 476 0020 15D1     		bne	.L38
 330:Src/main.c    ****       break;
 477              		.loc 1 330 7 is_stmt 1 view .LVU102
 330:Src/main.c    ****       break;
 478              		.loc 1 330 12 is_stmt 0 view .LVU103
 479 0022 0D4A     		ldr	r2, .L41
 480 0024 5369     		ldr	r3, [r2, #20]
 330:Src/main.c    ****       break;
 481              		.loc 1 330 18 view .LVU104
 482 0026 4021     		movs	r1, #64
 483 0028 4B40     		eors	r3, r1
 484 002a 5361     		str	r3, [r2, #20]
 331:Src/main.c    ****     case 'g':
 485              		.loc 1 331 7 is_stmt 1 view .LVU105
 486              	.L39:
 351:Src/main.c    **** }
 487              		.loc 1 351 3 view .LVU106
 488 002c 0B48     		ldr	r0, .L41+4
 489              	.LVL22:
 351:Src/main.c    **** }
 490              		.loc 1 351 3 is_stmt 0 view .LVU107
 491 002e FFF7FEFF 		bl	USART_TransmitString
 492              	.LVL23:
 493              	.L33:
 352:Src/main.c    **** 
 494              		.loc 1 352 1 view .LVU108
 495              		@ sp needed
 496 0032 10BD     		pop	{r4, pc}
 497              	.LVL24:
 498              	.L36:
 338:Src/main.c    ****       break;
 499              		.loc 1 338 7 is_stmt 1 view .LVU109
 338:Src/main.c    ****       break;
 500              		.loc 1 338 12 is_stmt 0 view .LVU110
 501 0034 084A     		ldr	r2, .L41
 502 0036 5369     		ldr	r3, [r2, #20]
 338:Src/main.c    ****       break;
 503              		.loc 1 338 18 view .LVU111
 504 0038 8021     		movs	r1, #128
 505 003a 4B40     		eors	r3, r1
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 31


 506 003c 5361     		str	r3, [r2, #20]
 339:Src/main.c    ****     case 'o':
 507              		.loc 1 339 7 is_stmt 1 view .LVU112
 508 003e F5E7     		b	.L39
 509              	.L34:
 342:Src/main.c    ****       break;
 510              		.loc 1 342 7 view .LVU113
 342:Src/main.c    ****       break;
 511              		.loc 1 342 12 is_stmt 0 view .LVU114
 512 0040 054A     		ldr	r2, .L41
 513 0042 5169     		ldr	r1, [r2, #20]
 342:Src/main.c    ****       break;
 514              		.loc 1 342 18 view .LVU115
 515 0044 8023     		movs	r3, #128
 516 0046 5B00     		lsls	r3, r3, #1
 517 0048 4B40     		eors	r3, r1
 518 004a 5361     		str	r3, [r2, #20]
 343:Src/main.c    ****     default:
 519              		.loc 1 343 7 is_stmt 1 view .LVU116
 520 004c EEE7     		b	.L39
 521              	.L38:
 346:Src/main.c    ****       return;  // Exit the function if an unrecognized command is received
 522              		.loc 1 346 7 view .LVU117
 523 004e 0448     		ldr	r0, .L41+8
 524              	.LVL25:
 346:Src/main.c    ****       return;  // Exit the function if an unrecognized command is received
 525              		.loc 1 346 7 is_stmt 0 view .LVU118
 526 0050 FFF7FEFF 		bl	USART_TransmitString
 527              	.LVL26:
 347:Src/main.c    ****   }
 528              		.loc 1 347 7 is_stmt 1 view .LVU119
 529 0054 EDE7     		b	.L33
 530              	.L42:
 531 0056 C046     		.align	2
 532              	.L41:
 533 0058 00080048 		.word	1207961600
 534 005c 00000000 		.word	.LC10
 535 0060 00000000 		.word	.LC2
 536              		.cfi_endproc
 537              	.LFE44:
 539              		.section	.text.USART_ReceiveChar,"ax",%progbits
 540              		.align	1
 541              		.global	USART_ReceiveChar
 542              		.syntax unified
 543              		.code	16
 544              		.thumb_func
 546              	USART_ReceiveChar:
 547              	.LFB49:
 393:Src/main.c    **** 
 394:Src/main.c    **** // Function to receive a single character on USART3 (blocking)
 395:Src/main.c    **** char USART_ReceiveChar(void) {
 548              		.loc 1 395 30 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553              	.L44:
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 32


 396:Src/main.c    ****   // Wait for the USART receive data register to not be empty
 397:Src/main.c    ****   while (!(USART3->ISR & USART_ISR_RXNE));
 554              		.loc 1 397 10 discriminator 1 view .LVU121
 555              		.loc 1 397 18 is_stmt 0 discriminator 1 view .LVU122
 556 0000 034B     		ldr	r3, .L46
 557 0002 DB69     		ldr	r3, [r3, #28]
 558              		.loc 1 397 10 discriminator 1 view .LVU123
 559 0004 9B06     		lsls	r3, r3, #26
 560 0006 FBD5     		bpl	.L44
 398:Src/main.c    **** 
 399:Src/main.c    ****   // Read and return the received character
 400:Src/main.c    ****   return (char)(USART3->RDR & 0xFF);
 561              		.loc 1 400 3 is_stmt 1 view .LVU124
 562              		.loc 1 400 23 is_stmt 0 view .LVU125
 563 0008 014B     		ldr	r3, .L46
 564 000a 988C     		ldrh	r0, [r3, #36]
 565              		.loc 1 400 10 discriminator 1 view .LVU126
 566 000c C0B2     		uxtb	r0, r0
 401:Src/main.c    **** }
 567              		.loc 1 401 1 view .LVU127
 568              		@ sp needed
 569 000e 7047     		bx	lr
 570              	.L47:
 571              		.align	2
 572              	.L46:
 573 0010 00480040 		.word	1073760256
 574              		.cfi_endproc
 575              	.LFE49:
 577              		.section	.text.processCommand,"ax",%progbits
 578              		.align	1
 579              		.global	processCommand
 580              		.syntax unified
 581              		.code	16
 582              		.thumb_func
 584              	processCommand:
 585              	.LVL27:
 586              	.LFB41:
 237:Src/main.c    ****   char color;
 587              		.loc 1 237 35 is_stmt 1 view -0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 237:Src/main.c    ****   char color;
 591              		.loc 1 237 35 is_stmt 0 view .LVU129
 592 0000 10B5     		push	{r4, lr}
 593              	.LCFI4:
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 4, -8
 596              		.cfi_offset 14, -4
 597 0002 0400     		movs	r4, r0
 238:Src/main.c    ****   char action;
 598              		.loc 1 238 3 is_stmt 1 view .LVU130
 239:Src/main.c    **** 
 599              		.loc 1 239 3 view .LVU131
 242:Src/main.c    ****   action = USART_ReceiveChar();
 600              		.loc 1 242 3 view .LVU132
 601              	.LVL28:
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 33


 243:Src/main.c    **** 
 602              		.loc 1 243 3 view .LVU133
 243:Src/main.c    **** 
 603              		.loc 1 243 12 is_stmt 0 view .LVU134
 604 0004 FFF7FEFF 		bl	USART_ReceiveChar
 605              	.LVL29:
 246:Src/main.c    ****     case '0':
 606              		.loc 1 246 3 is_stmt 1 view .LVU135
 607 0008 3128     		cmp	r0, #49
 608 000a 07D0     		beq	.L49
 609 000c 3228     		cmp	r0, #50
 610 000e 09D0     		beq	.L50
 611 0010 3028     		cmp	r0, #48
 612 0012 0BD1     		bne	.L51
 613              	.LBB10:
 249:Src/main.c    ****       break;
 614              		.loc 1 249 7 view .LVU136
 615 0014 2000     		movs	r0, r4
 616              	.LVL30:
 249:Src/main.c    ****       break;
 617              		.loc 1 249 7 is_stmt 0 view .LVU137
 618 0016 FFF7FEFF 		bl	turnOffLED
 619              	.LVL31:
 250:Src/main.c    ****     case '1':
 620              		.loc 1 250 7 is_stmt 1 view .LVU138
 621              	.L48:
 622              	.LBE10:
 264:Src/main.c    **** 
 623              		.loc 1 264 1 is_stmt 0 view .LVU139
 624              		@ sp needed
 625              	.LVL32:
 264:Src/main.c    **** 
 626              		.loc 1 264 1 view .LVU140
 627 001a 10BD     		pop	{r4, pc}
 628              	.LVL33:
 629              	.L49:
 630              	.LBB11:
 253:Src/main.c    ****       break;
 631              		.loc 1 253 7 is_stmt 1 view .LVU141
 632 001c 2000     		movs	r0, r4
 633              	.LVL34:
 253:Src/main.c    ****       break;
 634              		.loc 1 253 7 is_stmt 0 view .LVU142
 635 001e FFF7FEFF 		bl	turnOnLED
 636              	.LVL35:
 254:Src/main.c    ****     case '2':
 637              		.loc 1 254 7 is_stmt 1 view .LVU143
 638 0022 FAE7     		b	.L48
 639              	.LVL36:
 640              	.L50:
 257:Src/main.c    ****       break;
 641              		.loc 1 257 7 view .LVU144
 642 0024 2000     		movs	r0, r4
 643              	.LVL37:
 257:Src/main.c    ****       break;
 644              		.loc 1 257 7 is_stmt 0 view .LVU145
 645 0026 FFF7FEFF 		bl	toggleLED
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 34


 646              	.LVL38:
 258:Src/main.c    ****     default:
 647              		.loc 1 258 7 is_stmt 1 view .LVU146
 648 002a F6E7     		b	.L48
 649              	.LVL39:
 650              	.L51:
 261:Src/main.c    ****       break;
 651              		.loc 1 261 7 view .LVU147
 652 002c 0148     		ldr	r0, .L53
 653              	.LVL40:
 261:Src/main.c    ****       break;
 654              		.loc 1 261 7 is_stmt 0 view .LVU148
 655 002e FFF7FEFF 		bl	USART_TransmitString
 656              	.LVL41:
 262:Src/main.c    ****   }
 657              		.loc 1 262 7 is_stmt 1 view .LVU149
 658              	.LBE11:
 264:Src/main.c    **** 
 659              		.loc 1 264 1 is_stmt 0 view .LVU150
 660 0032 F2E7     		b	.L48
 661              	.L54:
 662              		.align	2
 663              	.L53:
 664 0034 00000000 		.word	.LC2
 665              		.cfi_endproc
 666              	.LFE41:
 668              		.section	.text._Error_Handler,"ax",%progbits
 669              		.align	1
 670              		.global	_Error_Handler
 671              		.syntax unified
 672              		.code	16
 673              		.thumb_func
 675              	_Error_Handler:
 676              	.LFB51:
 402:Src/main.c    **** 
 403:Src/main.c    **** /** System Clock Configuration
 404:Src/main.c    **** */
 405:Src/main.c    **** void SystemClock_Config(void)
 406:Src/main.c    **** {
 407:Src/main.c    **** 
 408:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 409:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 410:Src/main.c    **** 
 411:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 412:Src/main.c    ****     */
 413:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 414:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 415:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 416:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 417:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 418:Src/main.c    ****   {
 419:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 420:Src/main.c    ****   }
 421:Src/main.c    **** 
 422:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 423:Src/main.c    ****     */
 424:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 35


 425:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 426:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 427:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 428:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 429:Src/main.c    **** 
 430:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 431:Src/main.c    ****   {
 432:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 433:Src/main.c    ****   }
 434:Src/main.c    **** 
 435:Src/main.c    ****     /**Configure the Systick interrupt time
 436:Src/main.c    ****     */
 437:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 438:Src/main.c    **** 
 439:Src/main.c    ****     /**Configure the Systick
 440:Src/main.c    ****     */
 441:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 442:Src/main.c    **** 
 443:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 444:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 445:Src/main.c    **** }
 446:Src/main.c    **** 
 447:Src/main.c    **** /* USER CODE BEGIN 4 */
 448:Src/main.c    **** 
 449:Src/main.c    **** /* USER CODE END 4 */
 450:Src/main.c    **** 
 451:Src/main.c    **** /**
 452:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 453:Src/main.c    ****   * @param  None
 454:Src/main.c    ****   * @retval None
 455:Src/main.c    ****   */
 456:Src/main.c    **** void _Error_Handler(char * file, int line)
 457:Src/main.c    **** {
 677              		.loc 1 457 1 is_stmt 1 view -0
 678              		.cfi_startproc
 679              		@ Volatile: function does not return.
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 0, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683              	.LVL42:
 684              	.L56:
 458:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 459:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 460:Src/main.c    ****   while(1)
 685              		.loc 1 460 3 view .LVU152
 461:Src/main.c    ****   {
 462:Src/main.c    ****   }
 686              		.loc 1 462 3 view .LVU153
 460:Src/main.c    ****   {
 687              		.loc 1 460 8 view .LVU154
 688 0000 FEE7     		b	.L56
 689              		.cfi_endproc
 690              	.LFE51:
 692              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 693              		.align	2
 694              	.LC13:
 695 0000 5372632F 		.ascii	"Src/main.c\000"
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 36


 695      6D61696E 
 695      2E6300
 696              		.global	__aeabi_uidiv
 697              		.section	.text.SystemClock_Config,"ax",%progbits
 698              		.align	1
 699              		.global	SystemClock_Config
 700              		.syntax unified
 701              		.code	16
 702              		.thumb_func
 704              	SystemClock_Config:
 705              	.LFB50:
 406:Src/main.c    **** 
 706              		.loc 1 406 1 view -0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 72
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710 0000 00B5     		push	{lr}
 711              	.LCFI5:
 712              		.cfi_def_cfa_offset 4
 713              		.cfi_offset 14, -4
 714 0002 93B0     		sub	sp, sp, #76
 715              	.LCFI6:
 716              		.cfi_def_cfa_offset 80
 408:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 717              		.loc 1 408 3 view .LVU156
 409:Src/main.c    **** 
 718              		.loc 1 409 3 view .LVU157
 413:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 719              		.loc 1 413 3 view .LVU158
 413:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 720              		.loc 1 413 36 is_stmt 0 view .LVU159
 721 0004 0223     		movs	r3, #2
 722 0006 0593     		str	r3, [sp, #20]
 414:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 723              		.loc 1 414 3 is_stmt 1 view .LVU160
 414:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 724              		.loc 1 414 30 is_stmt 0 view .LVU161
 725 0008 013B     		subs	r3, r3, #1
 726 000a 0893     		str	r3, [sp, #32]
 415:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 727              		.loc 1 415 3 is_stmt 1 view .LVU162
 415:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 728              		.loc 1 415 41 is_stmt 0 view .LVU163
 729 000c 0F33     		adds	r3, r3, #15
 730 000e 0993     		str	r3, [sp, #36]
 416:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 731              		.loc 1 416 3 is_stmt 1 view .LVU164
 416:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 732              		.loc 1 416 34 is_stmt 0 view .LVU165
 733 0010 0023     		movs	r3, #0
 734 0012 0E93     		str	r3, [sp, #56]
 417:Src/main.c    ****   {
 735              		.loc 1 417 3 is_stmt 1 view .LVU166
 417:Src/main.c    ****   {
 736              		.loc 1 417 7 is_stmt 0 view .LVU167
 737 0014 05A8     		add	r0, sp, #20
 738 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 37


 739              	.LVL43:
 417:Src/main.c    ****   {
 740              		.loc 1 417 6 discriminator 1 view .LVU168
 741 001a 0028     		cmp	r0, #0
 742 001c 1ED1     		bne	.L60
 424:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 743              		.loc 1 424 3 is_stmt 1 view .LVU169
 424:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 744              		.loc 1 424 31 is_stmt 0 view .LVU170
 745 001e 0723     		movs	r3, #7
 746 0020 0193     		str	r3, [sp, #4]
 426:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 747              		.loc 1 426 3 is_stmt 1 view .LVU171
 426:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 748              		.loc 1 426 34 is_stmt 0 view .LVU172
 749 0022 0023     		movs	r3, #0
 750 0024 0293     		str	r3, [sp, #8]
 427:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 751              		.loc 1 427 3 is_stmt 1 view .LVU173
 427:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 752              		.loc 1 427 35 is_stmt 0 view .LVU174
 753 0026 0393     		str	r3, [sp, #12]
 428:Src/main.c    **** 
 754              		.loc 1 428 3 is_stmt 1 view .LVU175
 428:Src/main.c    **** 
 755              		.loc 1 428 36 is_stmt 0 view .LVU176
 756 0028 0493     		str	r3, [sp, #16]
 430:Src/main.c    ****   {
 757              		.loc 1 430 3 is_stmt 1 view .LVU177
 430:Src/main.c    ****   {
 758              		.loc 1 430 7 is_stmt 0 view .LVU178
 759 002a 0021     		movs	r1, #0
 760 002c 01A8     		add	r0, sp, #4
 761 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 762              	.LVL44:
 430:Src/main.c    ****   {
 763              		.loc 1 430 6 discriminator 1 view .LVU179
 764 0032 0028     		cmp	r0, #0
 765 0034 17D1     		bne	.L61
 437:Src/main.c    **** 
 766              		.loc 1 437 3 is_stmt 1 view .LVU180
 437:Src/main.c    **** 
 767              		.loc 1 437 22 is_stmt 0 view .LVU181
 768 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 769              	.LVL45:
 437:Src/main.c    **** 
 770              		.loc 1 437 3 discriminator 1 view .LVU182
 771 003a FA21     		movs	r1, #250
 772 003c 8900     		lsls	r1, r1, #2
 773 003e FFF7FEFF 		bl	__aeabi_uidiv
 774              	.LVL46:
 775 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 776              	.LVL47:
 441:Src/main.c    **** 
 777              		.loc 1 441 3 is_stmt 1 view .LVU183
 778 0046 0420     		movs	r0, #4
 779 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 38


 780              	.LVL48:
 444:Src/main.c    **** }
 781              		.loc 1 444 3 view .LVU184
 782 004c 0120     		movs	r0, #1
 783 004e 0022     		movs	r2, #0
 784 0050 0021     		movs	r1, #0
 785 0052 4042     		rsbs	r0, r0, #0
 786 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 787              	.LVL49:
 445:Src/main.c    **** 
 788              		.loc 1 445 1 is_stmt 0 view .LVU185
 789 0058 13B0     		add	sp, sp, #76
 790              		@ sp needed
 791 005a 00BD     		pop	{pc}
 792              	.L60:
 419:Src/main.c    ****   }
 793              		.loc 1 419 5 is_stmt 1 view .LVU186
 794 005c A421     		movs	r1, #164
 795 005e 0448     		ldr	r0, .L62
 796 0060 FF31     		adds	r1, r1, #255
 797 0062 FFF7FEFF 		bl	_Error_Handler
 798              	.LVL50:
 799              	.L61:
 432:Src/main.c    ****   }
 800              		.loc 1 432 5 view .LVU187
 801 0066 D821     		movs	r1, #216
 802 0068 0148     		ldr	r0, .L62
 803 006a 4900     		lsls	r1, r1, #1
 804 006c FFF7FEFF 		bl	_Error_Handler
 805              	.LVL51:
 806              	.L63:
 807              		.align	2
 808              	.L62:
 809 0070 00000000 		.word	.LC13
 810              		.cfi_endproc
 811              	.LFE50:
 813              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 814              		.align	2
 815              	.LC15:
 816 0000 434D443F 		.ascii	"CMD? \000"
 816      2000
 817              		.section	.text.main,"ax",%progbits
 818              		.align	1
 819              		.global	main
 820              		.syntax unified
 821              		.code	16
 822              		.thumb_func
 824              	main:
 825              	.LFB40:
  80:Src/main.c    ****   HAL_Init();               // Reset of all peripherals, init the Flash and Systick
 826              		.loc 1 80 16 view -0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 831              	.LCFI7:
 832              		.cfi_def_cfa_offset 20
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 39


 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 D646     		mov	lr, r10
 839 0004 4F46     		mov	r7, r9
 840 0006 4646     		mov	r6, r8
 841 0008 C0B5     		push	{r6, r7, lr}
 842              	.LCFI8:
 843              		.cfi_def_cfa_offset 32
 844              		.cfi_offset 8, -32
 845              		.cfi_offset 9, -28
 846              		.cfi_offset 10, -24
  81:Src/main.c    ****   SystemClock_Config();     // Configure the system clock
 847              		.loc 1 81 3 view .LVU189
 848 000a FFF7FEFF 		bl	HAL_Init
 849              	.LVL52:
  82:Src/main.c    **** 
 850              		.loc 1 82 3 view .LVU190
 851 000e FFF7FEFF 		bl	SystemClock_Config
 852              	.LVL53:
  84:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable GPIOB clock for USART3 pins
 853              		.loc 1 84 3 view .LVU191
  84:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable GPIOB clock for USART3 pins
 854              		.loc 1 84 6 is_stmt 0 view .LVU192
 855 0012 634B     		ldr	r3, .L67
 856 0014 5969     		ldr	r1, [r3, #20]
  84:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable GPIOB clock for USART3 pins
 857              		.loc 1 84 15 view .LVU193
 858 0016 8022     		movs	r2, #128
 859 0018 1203     		lsls	r2, r2, #12
 860 001a 0A43     		orrs	r2, r1
 861 001c 5A61     		str	r2, [r3, #20]
  85:Src/main.c    **** 
 862              		.loc 1 85 3 is_stmt 1 view .LVU194
  85:Src/main.c    **** 
 863              		.loc 1 85 6 is_stmt 0 view .LVU195
 864 001e 5A69     		ldr	r2, [r3, #20]
  85:Src/main.c    **** 
 865              		.loc 1 85 15 view .LVU196
 866 0020 8021     		movs	r1, #128
 867 0022 C902     		lsls	r1, r1, #11
 868 0024 0A43     		orrs	r2, r1
 869 0026 5A61     		str	r2, [r3, #20]
  89:Src/main.c    ****   GPIOC->MODER &= ~(1 << 15);
 870              		.loc 1 89 3 is_stmt 1 view .LVU197
  89:Src/main.c    ****   GPIOC->MODER &= ~(1 << 15);
 871              		.loc 1 89 8 is_stmt 0 view .LVU198
 872 0028 5E4C     		ldr	r4, .L67+4
 873 002a 2068     		ldr	r0, [r4]
  89:Src/main.c    ****   GPIOC->MODER &= ~(1 << 15);
 874              		.loc 1 89 16 view .LVU199
 875 002c 8022     		movs	r2, #128
 876 002e D201     		lsls	r2, r2, #7
 877 0030 0243     		orrs	r2, r0
 878 0032 2260     		str	r2, [r4]
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 40


  90:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
 879              		.loc 1 90 3 is_stmt 1 view .LVU200
  90:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
 880              		.loc 1 90 8 is_stmt 0 view .LVU201
 881 0034 2268     		ldr	r2, [r4]
  90:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
 882              		.loc 1 90 16 view .LVU202
 883 0036 5C48     		ldr	r0, .L67+8
 884 0038 0240     		ands	r2, r0
 885 003a 2260     		str	r2, [r4]
  91:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 14);
 886              		.loc 1 91 3 is_stmt 1 view .LVU203
  91:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 14);
 887              		.loc 1 91 8 is_stmt 0 view .LVU204
 888 003c 6268     		ldr	r2, [r4, #4]
  91:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 14);
 889              		.loc 1 91 17 view .LVU205
 890 003e 8025     		movs	r5, #128
 891 0040 A846     		mov	r8, r5
 892 0042 AA43     		bics	r2, r5
 893 0044 6260     		str	r2, [r4, #4]
  92:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 15);
 894              		.loc 1 92 3 is_stmt 1 view .LVU206
  92:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 15);
 895              		.loc 1 92 8 is_stmt 0 view .LVU207
 896 0046 A268     		ldr	r2, [r4, #8]
  92:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 15);
 897              		.loc 1 92 18 view .LVU208
 898 0048 584D     		ldr	r5, .L67+12
 899 004a 2A40     		ands	r2, r5
 900 004c A260     		str	r2, [r4, #8]
  93:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 14);
 901              		.loc 1 93 3 is_stmt 1 view .LVU209
  93:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 14);
 902              		.loc 1 93 8 is_stmt 0 view .LVU210
 903 004e A268     		ldr	r2, [r4, #8]
  93:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 14);
 904              		.loc 1 93 18 view .LVU211
 905 0050 0240     		ands	r2, r0
 906 0052 A260     		str	r2, [r4, #8]
  94:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 15);
 907              		.loc 1 94 3 is_stmt 1 view .LVU212
  94:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 15);
 908              		.loc 1 94 8 is_stmt 0 view .LVU213
 909 0054 E268     		ldr	r2, [r4, #12]
  94:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 15);
 910              		.loc 1 94 16 view .LVU214
 911 0056 2A40     		ands	r2, r5
 912 0058 E260     		str	r2, [r4, #12]
  95:Src/main.c    **** 
 913              		.loc 1 95 3 is_stmt 1 view .LVU215
  95:Src/main.c    **** 
 914              		.loc 1 95 8 is_stmt 0 view .LVU216
 915 005a E268     		ldr	r2, [r4, #12]
  95:Src/main.c    **** 
 916              		.loc 1 95 16 view .LVU217
 917 005c 0240     		ands	r2, r0
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 41


 918 005e E260     		str	r2, [r4, #12]
  98:Src/main.c    ****   GPIOC->MODER &= ~(1 << 13);
 919              		.loc 1 98 3 is_stmt 1 view .LVU218
  98:Src/main.c    ****   GPIOC->MODER &= ~(1 << 13);
 920              		.loc 1 98 8 is_stmt 0 view .LVU219
 921 0060 2068     		ldr	r0, [r4]
  98:Src/main.c    ****   GPIOC->MODER &= ~(1 << 13);
 922              		.loc 1 98 16 view .LVU220
 923 0062 8022     		movs	r2, #128
 924 0064 5201     		lsls	r2, r2, #5
 925 0066 0243     		orrs	r2, r0
 926 0068 2260     		str	r2, [r4]
  99:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 6);
 927              		.loc 1 99 3 is_stmt 1 view .LVU221
  99:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 6);
 928              		.loc 1 99 8 is_stmt 0 view .LVU222
 929 006a 2268     		ldr	r2, [r4]
  99:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 6);
 930              		.loc 1 99 16 view .LVU223
 931 006c 5048     		ldr	r0, .L67+16
 932 006e 0240     		ands	r2, r0
 933 0070 2260     		str	r2, [r4]
 100:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 12);
 934              		.loc 1 100 3 is_stmt 1 view .LVU224
 100:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 12);
 935              		.loc 1 100 8 is_stmt 0 view .LVU225
 936 0072 6268     		ldr	r2, [r4, #4]
 100:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 12);
 937              		.loc 1 100 17 view .LVU226
 938 0074 4027     		movs	r7, #64
 939 0076 BA43     		bics	r2, r7
 940 0078 6260     		str	r2, [r4, #4]
 101:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 13);
 941              		.loc 1 101 3 is_stmt 1 view .LVU227
 101:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 13);
 942              		.loc 1 101 8 is_stmt 0 view .LVU228
 943 007a A268     		ldr	r2, [r4, #8]
 101:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 13);
 944              		.loc 1 101 18 view .LVU229
 945 007c 4D4D     		ldr	r5, .L67+20
 946 007e 2A40     		ands	r2, r5
 947 0080 A260     		str	r2, [r4, #8]
 102:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 12); 
 948              		.loc 1 102 3 is_stmt 1 view .LVU230
 102:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 12); 
 949              		.loc 1 102 8 is_stmt 0 view .LVU231
 950 0082 A268     		ldr	r2, [r4, #8]
 102:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 12); 
 951              		.loc 1 102 18 view .LVU232
 952 0084 0240     		ands	r2, r0
 953 0086 A260     		str	r2, [r4, #8]
 103:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 13); 
 954              		.loc 1 103 3 is_stmt 1 view .LVU233
 103:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 13); 
 955              		.loc 1 103 8 is_stmt 0 view .LVU234
 956 0088 E268     		ldr	r2, [r4, #12]
 103:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 13); 
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 42


 957              		.loc 1 103 16 view .LVU235
 958 008a 2A40     		ands	r2, r5
 959 008c E260     		str	r2, [r4, #12]
 104:Src/main.c    **** 
 960              		.loc 1 104 3 is_stmt 1 view .LVU236
 104:Src/main.c    **** 
 961              		.loc 1 104 8 is_stmt 0 view .LVU237
 962 008e E268     		ldr	r2, [r4, #12]
 104:Src/main.c    **** 
 963              		.loc 1 104 16 view .LVU238
 964 0090 0240     		ands	r2, r0
 965 0092 E260     		str	r2, [r4, #12]
 107:Src/main.c    ****   GPIOC->MODER &= ~(1 << 19);
 966              		.loc 1 107 3 is_stmt 1 view .LVU239
 107:Src/main.c    ****   GPIOC->MODER &= ~(1 << 19);
 967              		.loc 1 107 8 is_stmt 0 view .LVU240
 968 0094 2268     		ldr	r2, [r4]
 107:Src/main.c    ****   GPIOC->MODER &= ~(1 << 19);
 969              		.loc 1 107 16 view .LVU241
 970 0096 0A43     		orrs	r2, r1
 971 0098 2260     		str	r2, [r4]
 108:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 972              		.loc 1 108 3 is_stmt 1 view .LVU242
 108:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 973              		.loc 1 108 8 is_stmt 0 view .LVU243
 974 009a 2268     		ldr	r2, [r4]
 108:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 975              		.loc 1 108 16 view .LVU244
 976 009c 4648     		ldr	r0, .L67+24
 977 009e 0240     		ands	r2, r0
 978 00a0 2260     		str	r2, [r4]
 109:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 18);
 979              		.loc 1 109 3 is_stmt 1 view .LVU245
 109:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 18);
 980              		.loc 1 109 8 is_stmt 0 view .LVU246
 981 00a2 6268     		ldr	r2, [r4, #4]
 109:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 18);
 982              		.loc 1 109 17 view .LVU247
 983 00a4 454E     		ldr	r6, .L67+28
 984 00a6 3240     		ands	r2, r6
 985 00a8 6260     		str	r2, [r4, #4]
 110:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 19);
 986              		.loc 1 110 3 is_stmt 1 view .LVU248
 110:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 19);
 987              		.loc 1 110 8 is_stmt 0 view .LVU249
 988 00aa A268     		ldr	r2, [r4, #8]
 110:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 19);
 989              		.loc 1 110 18 view .LVU250
 990 00ac 444D     		ldr	r5, .L67+32
 991 00ae 2A40     		ands	r2, r5
 992 00b0 A260     		str	r2, [r4, #8]
 111:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 18); 
 993              		.loc 1 111 3 is_stmt 1 view .LVU251
 111:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 18); 
 994              		.loc 1 111 8 is_stmt 0 view .LVU252
 995 00b2 A268     		ldr	r2, [r4, #8]
 111:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 18); 
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 43


 996              		.loc 1 111 18 view .LVU253
 997 00b4 0240     		ands	r2, r0
 998 00b6 A260     		str	r2, [r4, #8]
 112:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 19);
 999              		.loc 1 112 3 is_stmt 1 view .LVU254
 112:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 19);
 1000              		.loc 1 112 8 is_stmt 0 view .LVU255
 1001 00b8 E268     		ldr	r2, [r4, #12]
 112:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 19);
 1002              		.loc 1 112 16 view .LVU256
 1003 00ba 2A40     		ands	r2, r5
 1004 00bc E260     		str	r2, [r4, #12]
 113:Src/main.c    **** 
 1005              		.loc 1 113 3 is_stmt 1 view .LVU257
 113:Src/main.c    **** 
 1006              		.loc 1 113 8 is_stmt 0 view .LVU258
 1007 00be E268     		ldr	r2, [r4, #12]
 113:Src/main.c    **** 
 1008              		.loc 1 113 16 view .LVU259
 1009 00c0 0240     		ands	r2, r0
 1010 00c2 E260     		str	r2, [r4, #12]
 116:Src/main.c    ****   GPIOC->MODER &= ~(1 << 17);
 1011              		.loc 1 116 3 is_stmt 1 view .LVU260
 116:Src/main.c    ****   GPIOC->MODER &= ~(1 << 17);
 1012              		.loc 1 116 8 is_stmt 0 view .LVU261
 1013 00c4 2068     		ldr	r0, [r4]
 116:Src/main.c    ****   GPIOC->MODER &= ~(1 << 17);
 1014              		.loc 1 116 16 view .LVU262
 1015 00c6 8022     		movs	r2, #128
 1016 00c8 5202     		lsls	r2, r2, #9
 1017 00ca 0243     		orrs	r2, r0
 1018 00cc 2260     		str	r2, [r4]
 117:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 1019              		.loc 1 117 3 is_stmt 1 view .LVU263
 117:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 1020              		.loc 1 117 8 is_stmt 0 view .LVU264
 1021 00ce 2268     		ldr	r2, [r4]
 117:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 1022              		.loc 1 117 16 view .LVU265
 1023 00d0 3C48     		ldr	r0, .L67+36
 1024 00d2 0240     		ands	r2, r0
 1025 00d4 2260     		str	r2, [r4]
 118:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 16);
 1026              		.loc 1 118 3 is_stmt 1 view .LVU266
 118:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 16);
 1027              		.loc 1 118 8 is_stmt 0 view .LVU267
 1028 00d6 6268     		ldr	r2, [r4, #4]
 118:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 16);
 1029              		.loc 1 118 17 view .LVU268
 1030 00d8 3B4D     		ldr	r5, .L67+40
 1031 00da AA46     		mov	r10, r5
 1032 00dc 2A40     		ands	r2, r5
 1033 00de 6260     		str	r2, [r4, #4]
 119:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 17);
 1034              		.loc 1 119 3 is_stmt 1 view .LVU269
 119:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 17);
 1035              		.loc 1 119 8 is_stmt 0 view .LVU270
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 44


 1036 00e0 A268     		ldr	r2, [r4, #8]
 119:Src/main.c    ****   GPIOC->OSPEEDR &= ~(1 << 17);
 1037              		.loc 1 119 18 view .LVU271
 1038 00e2 3A4D     		ldr	r5, .L67+44
 1039 00e4 2A40     		ands	r2, r5
 1040 00e6 A260     		str	r2, [r4, #8]
 120:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 16); 
 1041              		.loc 1 120 3 is_stmt 1 view .LVU272
 120:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 16); 
 1042              		.loc 1 120 8 is_stmt 0 view .LVU273
 1043 00e8 A268     		ldr	r2, [r4, #8]
 120:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 16); 
 1044              		.loc 1 120 18 view .LVU274
 1045 00ea 0240     		ands	r2, r0
 1046 00ec A260     		str	r2, [r4, #8]
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 17);
 1047              		.loc 1 121 3 is_stmt 1 view .LVU275
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 17);
 1048              		.loc 1 121 8 is_stmt 0 view .LVU276
 1049 00ee E268     		ldr	r2, [r4, #12]
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(1 << 17);
 1050              		.loc 1 121 16 view .LVU277
 1051 00f0 2A40     		ands	r2, r5
 1052 00f2 E260     		str	r2, [r4, #12]
 122:Src/main.c    **** 
 1053              		.loc 1 122 3 is_stmt 1 view .LVU278
 122:Src/main.c    **** 
 1054              		.loc 1 122 8 is_stmt 0 view .LVU279
 1055 00f4 E268     		ldr	r2, [r4, #12]
 122:Src/main.c    **** 
 1056              		.loc 1 122 16 view .LVU280
 1057 00f6 0240     		ands	r2, r0
 1058 00f8 E260     		str	r2, [r4, #12]
 125:Src/main.c    **** 
 1059              		.loc 1 125 3 is_stmt 1 view .LVU281
 125:Src/main.c    **** 
 1060              		.loc 1 125 6 is_stmt 0 view .LVU282
 1061 00fa 5869     		ldr	r0, [r3, #20]
 125:Src/main.c    **** 
 1062              		.loc 1 125 15 view .LVU283
 1063 00fc 8022     		movs	r2, #128
 1064 00fe 9202     		lsls	r2, r2, #10
 1065 0100 0243     		orrs	r2, r0
 1066 0102 5A61     		str	r2, [r3, #20]
 127:Src/main.c    ****   GPIOA->OSPEEDR &= ~(3 << 0);    // Set as low speed
 1067              		.loc 1 127 3 is_stmt 1 view .LVU284
 127:Src/main.c    ****   GPIOA->OSPEEDR &= ~(3 << 0);    // Set as low speed
 1068              		.loc 1 127 8 is_stmt 0 view .LVU285
 1069 0104 9022     		movs	r2, #144
 1070 0106 D205     		lsls	r2, r2, #23
 1071 0108 1068     		ldr	r0, [r2]
 127:Src/main.c    ****   GPIOA->OSPEEDR &= ~(3 << 0);    // Set as low speed
 1072              		.loc 1 127 16 view .LVU286
 1073 010a 0325     		movs	r5, #3
 1074 010c A843     		bics	r0, r5
 1075 010e 1060     		str	r0, [r2]
 128:Src/main.c    ****   GPIOA->PUPDR |= (1 << 0);       // Enable pull-down resistor
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 45


 1076              		.loc 1 128 3 is_stmt 1 view .LVU287
 128:Src/main.c    ****   GPIOA->PUPDR |= (1 << 0);       // Enable pull-down resistor
 1077              		.loc 1 128 8 is_stmt 0 view .LVU288
 1078 0110 9068     		ldr	r0, [r2, #8]
 128:Src/main.c    ****   GPIOA->PUPDR |= (1 << 0);       // Enable pull-down resistor
 1079              		.loc 1 128 18 view .LVU289
 1080 0112 A843     		bics	r0, r5
 1081 0114 9060     		str	r0, [r2, #8]
 129:Src/main.c    **** 
 1082              		.loc 1 129 3 is_stmt 1 view .LVU290
 129:Src/main.c    **** 
 1083              		.loc 1 129 8 is_stmt 0 view .LVU291
 1084 0116 D068     		ldr	r0, [r2, #12]
 129:Src/main.c    **** 
 1085              		.loc 1 129 16 view .LVU292
 1086 0118 023D     		subs	r5, r5, #2
 1087 011a 2843     		orrs	r0, r5
 1088 011c D060     		str	r0, [r2, #12]
 132:Src/main.c    **** 
 1089              		.loc 1 132 3 is_stmt 1 view .LVU293
 132:Src/main.c    **** 
 1090              		.loc 1 132 6 is_stmt 0 view .LVU294
 1091 011e DA69     		ldr	r2, [r3, #28]
 132:Src/main.c    **** 
 1092              		.loc 1 132 16 view .LVU295
 1093 0120 1143     		orrs	r1, r2
 1094 0122 D961     		str	r1, [r3, #28]
 135:Src/main.c    ****   uint32_t baud_rate = 115200;
 1095              		.loc 1 135 3 is_stmt 1 view .LVU296
 135:Src/main.c    ****   uint32_t baud_rate = 115200;
 1096              		.loc 1 135 24 is_stmt 0 view .LVU297
 1097 0124 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1098              	.LVL54:
 136:Src/main.c    ****   USART3->BRR = hclk_freq / baud_rate;
 1099              		.loc 1 136 3 is_stmt 1 view .LVU298
 137:Src/main.c    **** 
 1100              		.loc 1 137 3 view .LVU299
 137:Src/main.c    **** 
 1101              		.loc 1 137 27 is_stmt 0 view .LVU300
 1102 0128 E121     		movs	r1, #225
 1103 012a 4902     		lsls	r1, r1, #9
 1104 012c FFF7FEFF 		bl	__aeabi_uidiv
 1105              	.LVL55:
 137:Src/main.c    **** 
 1106              		.loc 1 137 15 view .LVU301
 1107 0130 274B     		ldr	r3, .L67+48
 1108 0132 D860     		str	r0, [r3, #12]
 140:Src/main.c    **** 
 1109              		.loc 1 140 3 is_stmt 1 view .LVU302
 140:Src/main.c    **** 
 1110              		.loc 1 140 9 is_stmt 0 view .LVU303
 1111 0134 1A68     		ldr	r2, [r3]
 140:Src/main.c    **** 
 1112              		.loc 1 140 15 view .LVU304
 1113 0136 0C21     		movs	r1, #12
 1114 0138 0A43     		orrs	r2, r1
 1115 013a 1A60     		str	r2, [r3]
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 46


 143:Src/main.c    **** 
 1116              		.loc 1 143 3 is_stmt 1 view .LVU305
 143:Src/main.c    **** 
 1117              		.loc 1 143 9 is_stmt 0 view .LVU306
 1118 013c 1A68     		ldr	r2, [r3]
 143:Src/main.c    **** 
 1119              		.loc 1 143 15 view .LVU307
 1120 013e 2A43     		orrs	r2, r5
 1121 0140 1A60     		str	r2, [r3]
 146:Src/main.c    ****   GPIOB->MODER |= (GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1);
 1122              		.loc 1 146 3 is_stmt 1 view .LVU308
 146:Src/main.c    ****   GPIOB->MODER |= (GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1);
 1123              		.loc 1 146 8 is_stmt 0 view .LVU309
 1124 0142 244B     		ldr	r3, .L67+52
 1125 0144 1A68     		ldr	r2, [r3]
 146:Src/main.c    ****   GPIOB->MODER |= (GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1);
 1126              		.loc 1 146 16 view .LVU310
 1127 0146 2449     		ldr	r1, .L67+56
 1128 0148 0A40     		ands	r2, r1
 1129 014a 1A60     		str	r2, [r3]
 147:Src/main.c    **** 
 1130              		.loc 1 147 3 is_stmt 1 view .LVU311
 147:Src/main.c    **** 
 1131              		.loc 1 147 8 is_stmt 0 view .LVU312
 1132 014c 1968     		ldr	r1, [r3]
 147:Src/main.c    **** 
 1133              		.loc 1 147 16 view .LVU313
 1134 014e A022     		movs	r2, #160
 1135 0150 1204     		lsls	r2, r2, #16
 1136 0152 0A43     		orrs	r2, r1
 1137 0154 1A60     		str	r2, [r3]
 150:Src/main.c    **** 
 1138              		.loc 1 150 3 is_stmt 1 view .LVU314
 150:Src/main.c    **** 
 1139              		.loc 1 150 13 is_stmt 0 view .LVU315
 1140 0156 596A     		ldr	r1, [r3, #36]
 150:Src/main.c    **** 
 1141              		.loc 1 150 17 view .LVU316
 1142 0158 8822     		movs	r2, #136
 1143 015a D201     		lsls	r2, r2, #7
 1144 015c 0A43     		orrs	r2, r1
 1145 015e 5A62     		str	r2, [r3, #36]
 153:Src/main.c    ****   GPIOC->ODR &= ~(1 << 6);  // Blue Low
 1146              		.loc 1 153 3 is_stmt 1 view .LVU317
 153:Src/main.c    ****   GPIOC->ODR &= ~(1 << 6);  // Blue Low
 1147              		.loc 1 153 8 is_stmt 0 view .LVU318
 1148 0160 6369     		ldr	r3, [r4, #20]
 153:Src/main.c    ****   GPIOC->ODR &= ~(1 << 6);  // Blue Low
 1149              		.loc 1 153 14 view .LVU319
 1150 0162 4246     		mov	r2, r8
 1151 0164 1343     		orrs	r3, r2
 1152 0166 6361     		str	r3, [r4, #20]
 154:Src/main.c    ****   GPIOC->ODR &= ~(1 << 9);   // Green Low
 1153              		.loc 1 154 3 is_stmt 1 view .LVU320
 154:Src/main.c    ****   GPIOC->ODR &= ~(1 << 9);   // Green Low
 1154              		.loc 1 154 8 is_stmt 0 view .LVU321
 1155 0168 6369     		ldr	r3, [r4, #20]
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 47


 154:Src/main.c    ****   GPIOC->ODR &= ~(1 << 9);   // Green Low
 1156              		.loc 1 154 14 view .LVU322
 1157 016a BB43     		bics	r3, r7
 1158 016c 6361     		str	r3, [r4, #20]
 155:Src/main.c    ****   GPIOC->ODR &= ~(1 << 8);  // Orange Low
 1159              		.loc 1 155 3 is_stmt 1 view .LVU323
 155:Src/main.c    ****   GPIOC->ODR &= ~(1 << 8);  // Orange Low
 1160              		.loc 1 155 8 is_stmt 0 view .LVU324
 1161 016e 6369     		ldr	r3, [r4, #20]
 155:Src/main.c    ****   GPIOC->ODR &= ~(1 << 8);  // Orange Low
 1162              		.loc 1 155 14 view .LVU325
 1163 0170 3340     		ands	r3, r6
 1164 0172 6361     		str	r3, [r4, #20]
 156:Src/main.c    **** 
 1165              		.loc 1 156 3 is_stmt 1 view .LVU326
 156:Src/main.c    **** 
 1166              		.loc 1 156 8 is_stmt 0 view .LVU327
 1167 0174 6369     		ldr	r3, [r4, #20]
 156:Src/main.c    **** 
 1168              		.loc 1 156 14 view .LVU328
 1169 0176 5246     		mov	r2, r10
 1170 0178 1340     		ands	r3, r2
 1171 017a 6361     		str	r3, [r4, #20]
 162:Src/main.c    **** 
 1172              		.loc 1 162 3 is_stmt 1 view .LVU329
 1173 017c FFF7FEFF 		bl	USART_Receive_Init
 1174              	.LVL56:
 1175              	.L66:
 164:Src/main.c    ****     // Print command prompt
 1176              		.loc 1 164 3 view .LVU330
 1177              	.LBB12:
 166:Src/main.c    **** 
 1178              		.loc 1 166 5 view .LVU331
 1179 0180 1648     		ldr	r0, .L67+60
 1180 0182 FFF7FEFF 		bl	USART_TransmitString
 1181              	.LVL57:
 169:Src/main.c    **** 
 1182              		.loc 1 169 5 view .LVU332
 1183              	.L65:
 169:Src/main.c    **** 
 1184              		.loc 1 169 12 discriminator 1 view .LVU333
 1185 0186 164B     		ldr	r3, .L67+64
 1186 0188 1B78     		ldrb	r3, [r3]
 1187 018a 002B     		cmp	r3, #0
 1188 018c FBD0     		beq	.L65
 172:Src/main.c    **** 
 1189              		.loc 1 172 5 view .LVU334
 1190 018e 154B     		ldr	r3, .L67+68
 1191 0190 1878     		ldrb	r0, [r3]
 1192 0192 C0B2     		uxtb	r0, r0
 1193 0194 FFF7FEFF 		bl	processCommand
 1194              	.LVL58:
 175:Src/main.c    ****   }
 1195              		.loc 1 175 5 view .LVU335
 175:Src/main.c    ****   }
 1196              		.loc 1 175 17 is_stmt 0 view .LVU336
 1197 0198 114B     		ldr	r3, .L67+64
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 48


 1198 019a 0022     		movs	r2, #0
 1199 019c 1A70     		strb	r2, [r3]
 1200              	.LBE12:
 164:Src/main.c    ****     // Print command prompt
 1201              		.loc 1 164 9 is_stmt 1 view .LVU337
 164:Src/main.c    ****     // Print command prompt
 1202              		.loc 1 164 13 is_stmt 0 view .LVU338
 1203 019e EFE7     		b	.L66
 1204              	.L68:
 1205              		.align	2
 1206              	.L67:
 1207 01a0 00100240 		.word	1073876992
 1208 01a4 00080048 		.word	1207961600
 1209 01a8 FF7FFFFF 		.word	-32769
 1210 01ac FFBFFFFF 		.word	-16385
 1211 01b0 FFDFFFFF 		.word	-8193
 1212 01b4 FFEFFFFF 		.word	-4097
 1213 01b8 FFFFF7FF 		.word	-524289
 1214 01bc FFFDFFFF 		.word	-513
 1215 01c0 FFFFFBFF 		.word	-262145
 1216 01c4 FFFFFDFF 		.word	-131073
 1217 01c8 FFFEFFFF 		.word	-257
 1218 01cc FFFFFEFF 		.word	-65537
 1219 01d0 00480040 		.word	1073760256
 1220 01d4 00040048 		.word	1207960576
 1221 01d8 FFFF0FFF 		.word	-15728641
 1222 01dc 00000000 		.word	.LC15
 1223 01e0 00000000 		.word	newDataFlag
 1224 01e4 00000000 		.word	receivedData
 1225              		.cfi_endproc
 1226              	.LFE40:
 1228              		.global	newDataFlag
 1229              		.section	.bss.newDataFlag,"aw",%nobits
 1232              	newDataFlag:
 1233 0000 00       		.space	1
 1234              		.global	receivedData
 1235              		.section	.bss.receivedData,"aw",%nobits
 1238              	receivedData:
 1239 0000 00       		.space	1
 1240              		.text
 1241              	.Letext0:
 1242              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1243              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1244              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1245              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1246              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1247              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1248              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s 			page 49


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:19     .text.USART_Receive_Init:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:25     .text.USART_Receive_Init:00000000 USART_Receive_Init
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:84     .text.USART_Receive_Init:00000020 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:91     .text.USART3_4_IRQHandler:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:97     .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:124    .text.USART3_4_IRQHandler:00000014 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:1238   .bss.receivedData:00000000 receivedData
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:1232   .bss.newDataFlag:00000000 newDataFlag
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:131    .text.USART_TransmitChar:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:137    .text.USART_TransmitChar:00000000 USART_TransmitChar
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:163    .text.USART_TransmitChar:00000010 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:168    .text.USART_TransmitString:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:174    .text.USART_TransmitString:00000000 USART_TransmitString
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:216    .rodata.turnOffLED.str1.4:00000000 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:223    .text.turnOffLED:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:229    .text.turnOffLED:00000000 turnOffLED
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:316    .text.turnOffLED:00000054 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:325    .rodata.turnOnLED.str1.4:00000000 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:329    .text.turnOnLED:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:335    .text.turnOnLED:00000000 turnOnLED
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:424    .text.turnOnLED:00000058 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:431    .rodata.toggleLED.str1.4:00000000 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:435    .text.toggleLED:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:441    .text.toggleLED:00000000 toggleLED
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:533    .text.toggleLED:00000058 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:540    .text.USART_ReceiveChar:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:546    .text.USART_ReceiveChar:00000000 USART_ReceiveChar
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:573    .text.USART_ReceiveChar:00000010 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:578    .text.processCommand:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:584    .text.processCommand:00000000 processCommand
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:664    .text.processCommand:00000034 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:669    .text._Error_Handler:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:675    .text._Error_Handler:00000000 _Error_Handler
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:693    .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:698    .text.SystemClock_Config:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:704    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:809    .text.SystemClock_Config:00000070 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:814    .rodata.main.str1.4:00000000 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:818    .text.main:00000000 $t
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:824    .text.main:00000000 main
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:1207   .text.main:000001a0 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:1233   .bss.newDataFlag:00000000 $d
/var/folders/6c/3h55x08d77sbyb3x0d6g70wr0000gn/T//ccWLkXzH.s:1239   .bss.receivedData:00000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
